"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.constructPayload = exports.mask = exports.getProto = void 0;
var os_1 = __importDefault(require("os"));
var url_1 = require("url");
var ssri_1 = __importDefault(require("ssri"));
var uuid_1 = require("uuid");
var package_json_1 = require("../../package.json");
var process_request_1 = __importDefault(require("./process-request"));
var process_response_1 = __importDefault(require("./process-response"));
/**
 * Extracts the protocol string from the incoming request
 *
 * @param req
 * @returns
 */
function getProto(req) {
    return req.socket.encrypted ? 'https' : 'http';
}
exports.getProto = getProto;
/**
 * This will generate an integrity hash that looks something like this:
 *
 * sha512-Naxska/M1INY/thefLQ49sExJ8E+89Q2bz/nC4Pet52iSRPtI9w3Cyg0QdZExt0uUbbnfMJZ0qTabiLJxw6Wrg==?1345
 *
 * With the last 4 digits on the end for us to use to identify it later in a list.
 */
function mask(apiKey) {
    return ssri_1["default"]
        .fromData(apiKey, {
        algorithms: ['sha512'],
        options: [apiKey.slice(-4)]
    })
        .toString();
}
exports.mask = mask;
function constructPayload(req, res, payloadData, logOptions) {
    var serverTime = payloadData.responseEndDateTime.getTime() - payloadData.startedDateTime.getTime();
    return {
        _id: payloadData.logId || (0, uuid_1.v4)(),
        _version: 3,
        group: {
            id: mask(payloadData.apiKey),
            label: payloadData.label,
            email: payloadData.email
        },
        clientIPAddress: req.socket.remoteAddress,
        development: !!(logOptions === null || logOptions === void 0 ? void 0 : logOptions.development),
        request: {
            log: {
                version: '1.2',
                creator: {
                    name: 'readme-metrics (node)',
                    version: package_json_1.version,
                    // x64-darwin21.3.0/14.19.3
                    comment: "".concat(os_1["default"].arch(), "-").concat(os_1["default"].platform()).concat(os_1["default"].release(), "/").concat(process.versions.node)
                },
                entries: [
                    {
                        pageref: payloadData.routePath
                            ? payloadData.routePath
                            : new url_1.URL(req.url, "".concat(getProto(req), "://").concat(req.headers.host)).toString(),
                        startedDateTime: payloadData.startedDateTime.toISOString(),
                        time: serverTime,
                        request: (0, process_request_1["default"])(req, payloadData.requestBody, logOptions),
                        response: (0, process_response_1["default"])(res, payloadData.responseBody, logOptions),
                        cache: {},
                        timings: {
                            // This requires us to know the time the request was sent to the server, so we're skipping it for now
                            wait: 0,
                            receive: serverTime
                        }
                    },
                ]
            }
        }
    };
}
exports.constructPayload = constructPayload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LXBheWxvYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbnN0cnVjdC1wYXlsb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLDBDQUFvQjtBQUNwQiwyQkFBMEI7QUFFMUIsOENBQXdCO0FBQ3hCLDZCQUFvQztBQUVwQyxtREFBNkM7QUFFN0Msc0VBQStDO0FBQy9DLHdFQUFpRDtBQUVqRDs7Ozs7R0FLRztBQUNILFNBQWdCLFFBQVEsQ0FBQyxHQUFvQjtJQUMzQyxPQUFRLEdBQUcsQ0FBQyxNQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDaEUsQ0FBQztBQUZELDRCQUVDO0FBK0ZEOzs7Ozs7R0FNRztBQUNILFNBQWdCLElBQUksQ0FBQyxNQUFNO0lBQ3pCLE9BQU8saUJBQUk7U0FDUixRQUFRLENBQUMsTUFBTSxFQUFFO1FBQ2hCLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQztRQUN0QixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUIsQ0FBQztTQUNELFFBQVEsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFQRCxvQkFPQztBQUVELFNBQWdCLGdCQUFnQixDQUM5QixHQUFvQixFQUNwQixHQUFtQixFQUNuQixXQUF3QixFQUN4QixVQUFzQjtJQUV0QixJQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVyRyxPQUFPO1FBQ0wsR0FBRyxFQUFFLFdBQVcsQ0FBQyxLQUFLLElBQUksSUFBQSxTQUFNLEdBQUU7UUFDbEMsUUFBUSxFQUFFLENBQUM7UUFDWCxLQUFLLEVBQUU7WUFDTCxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDNUIsS0FBSyxFQUFFLFdBQVcsQ0FBQyxLQUFLO1lBQ3hCLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztTQUN6QjtRQUNELGVBQWUsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLGFBQWE7UUFDekMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBLFVBQVUsYUFBVixVQUFVLHVCQUFWLFVBQVUsQ0FBRSxXQUFXLENBQUE7UUFDdEMsT0FBTyxFQUFFO1lBQ1AsR0FBRyxFQUFFO2dCQUNILE9BQU8sRUFBRSxLQUFLO2dCQUNkLE9BQU8sRUFBRTtvQkFDUCxJQUFJLEVBQUUsdUJBQXVCO29CQUM3QixPQUFPLHdCQUFBO29CQUNQLDJCQUEyQjtvQkFDM0IsT0FBTyxFQUFFLFVBQUcsZUFBRSxDQUFDLElBQUksRUFBRSxjQUFJLGVBQUUsQ0FBQyxRQUFRLEVBQUUsU0FBRyxlQUFFLENBQUMsT0FBTyxFQUFFLGNBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUU7aUJBQ2pGO2dCQUNELE9BQU8sRUFBRTtvQkFDUDt3QkFDRSxPQUFPLEVBQUUsV0FBVyxDQUFDLFNBQVM7NEJBQzVCLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUzs0QkFDdkIsQ0FBQyxDQUFDLElBQUksU0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsVUFBRyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7d0JBQ3pFLGVBQWUsRUFBRSxXQUFXLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRTt3QkFDMUQsSUFBSSxFQUFFLFVBQVU7d0JBQ2hCLE9BQU8sRUFBRSxJQUFBLDRCQUFjLEVBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDO3dCQUNqRSxRQUFRLEVBQUUsSUFBQSw2QkFBZSxFQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQzt3QkFDcEUsS0FBSyxFQUFFLEVBQUU7d0JBQ1QsT0FBTyxFQUFFOzRCQUNQLHFHQUFxRzs0QkFDckcsSUFBSSxFQUFFLENBQUM7NEJBQ1AsT0FBTyxFQUFFLFVBQVU7eUJBQ3BCO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRjtLQUNGLENBQUM7QUFDSixDQUFDO0FBL0NELDRDQStDQyJ9