"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.log = void 0;
var url = __importStar(require("url"));
var clamp_1 = __importDefault(require("lodash/clamp"));
var uuid_1 = require("uuid");
var config_1 = __importDefault(require("../config"));
var construct_payload_1 = require("./construct-payload");
var get_project_base_url_1 = require("./get-project-base-url");
var is_request_1 = __importDefault(require("./is-request"));
var metrics_log_1 = require("./metrics-log");
var patch_request_1 = require("./patch-request");
var patch_response_1 = require("./patch-response");
var queue = [];
function doSend(readmeApiKey, options) {
    // Copy the queue so we can send all the requests in one batch
    var json = __spreadArray([], queue, true);
    // Clear out the queue so we don't resend any data in the future
    queue = [];
    // Make the log call
    (0, metrics_log_1.metricsAPICall)(readmeApiKey, json)["catch"](function (e) {
        // Silently discard errors and timeouts.
        if (options.development)
            throw e;
    });
}
// Make sure we flush the queue if the process is exited
process.on('exit', doSend);
function setDocumentationHeader(res, baseLogUrl, logId) {
    // This is to catch the potential race condition where `getProjectBaseUrl()`
    // takes longer to respond than the original req/res to finish. Without this
    // we would get an error that would be very difficult to trace. This could
    // do with a test, but it's a little difficult to test. Maybe with a nock()
    // delay timeout.
    if (res.headersSent)
        return;
    res.setHeader('x-documentation-url', "".concat(baseLogUrl, "/logs/").concat(logId));
}
/**
 * This method will send supplied API requests to ReadMe Metrics.
 *
 * @see {@link https://readme.com/metrics}
 * @see {@link https://docs.readme.com/docs/sending-logs-to-readme-with-nodejs}
 * @param readmeApiKey The API key for your ReadMe project. This ensures your requests end up in
 *    your dashboard. You can read more about the API key in
 *    [our docs](https://docs.readme.com/reference/authentication).
 * @param req This is your incoming request object from your HTTP server and/or framework.
 * @param res This is your outgoing response object for your HTTP server and/or framework.
 * @param group A function that helps translate incoming request data to our metrics grouping data.
 * @param options Additional options. See the documentation for more details.
 */
function log(readmeApiKey, req, res, group, options) {
    if (options === void 0) { options = {}; }
    if (!readmeApiKey)
        throw new Error('You must provide your ReadMe API key');
    if (!group)
        throw new Error('You must provide a group');
    // Ensures the buffer length is between 1 and 30
    var bufferLength = (0, clamp_1["default"])(options.bufferLength || config_1["default"].bufferLength, 1, 30);
    var startedDateTime = new Date();
    var logId = (0, uuid_1.v4)();
    // baseLogUrl can be provided, but if it isn't then we
    // attempt to fetch it from the ReadMe API
    if (typeof options.baseLogUrl === 'string') {
        setDocumentationHeader(res, options.baseLogUrl, logId);
    }
    else {
        (0, get_project_base_url_1.getProjectBaseUrl)(readmeApiKey).then(function (baseLogUrl) {
            setDocumentationHeader(res, baseLogUrl, logId);
        });
    }
    (0, patch_response_1.patchResponse)(res);
    (0, patch_request_1.patchRequest)(req);
    /*
     * This should in future become more sophisticated, with flush timeouts and more error checking but
     * this is fine for now
     */
    function startSend() {
        var requestBody = req.body;
        if ((0, is_request_1["default"])(req, 'text/*')) {
            if ('_text' in req) {
                requestBody = req._text;
            }
        }
        else if ((0, is_request_1["default"])(req, '+json')) {
            if ('_json' in req) {
                requestBody = req._json;
            }
        }
        else if ((0, is_request_1["default"])(req, 'application/x-www-form-urlencoded')) {
            if ('_form_encoded' in req) {
                requestBody = req._form_encoded;
            }
        }
        var payload = (0, construct_payload_1.constructPayload)(req, res, __assign(__assign({}, group), { logId: logId, startedDateTime: startedDateTime, responseEndDateTime: new Date(), routePath: req.route
                ? url.format({
                    protocol: req.protocol,
                    host: req.hostname,
                    pathname: "".concat(req.baseUrl).concat(req.route.path)
                })
                : '', responseBody: res._body, requestBody: requestBody }), options);
        queue.push(payload);
        if (queue.length >= bufferLength)
            doSend(readmeApiKey, options);
        cleanup(); // eslint-disable-line @typescript-eslint/no-use-before-define
    }
    function cleanup() {
        res.removeListener('finish', startSend);
        res.removeListener('error', cleanup);
        res.removeListener('close', cleanup);
    }
    // Add response listeners
    res.once('finish', startSend);
    res.once('error', cleanup);
    res.once('close', cleanup);
    return logId;
}
exports.log = log;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9sb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLHVDQUEyQjtBQUUzQix1REFBaUM7QUFDakMsNkJBQW9DO0FBRXBDLHFEQUErQjtBQUUvQix5REFBdUQ7QUFDdkQsK0RBQTJEO0FBQzNELDREQUFxQztBQUNyQyw2Q0FBK0M7QUFDL0MsaURBQStDO0FBQy9DLG1EQUFpRDtBQUVqRCxJQUFJLEtBQUssR0FBc0IsRUFBRSxDQUFDO0FBQ2xDLFNBQVMsTUFBTSxDQUFDLFlBQVksRUFBRSxPQUFPO0lBQ25DLDhEQUE4RDtJQUM5RCxJQUFNLElBQUkscUJBQU8sS0FBSyxPQUFDLENBQUM7SUFDeEIsZ0VBQWdFO0lBQ2hFLEtBQUssR0FBRyxFQUFFLENBQUM7SUFFWCxvQkFBb0I7SUFDcEIsSUFBQSw0QkFBYyxFQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFLLENBQUEsQ0FBQyxVQUFBLENBQUM7UUFDeEMsd0NBQXdDO1FBQ3hDLElBQUksT0FBTyxDQUFDLFdBQVc7WUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFDRCx3REFBd0Q7QUFDeEQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFxQzNCLFNBQVMsc0JBQXNCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxLQUFLO0lBQ3BELDRFQUE0RTtJQUM1RSw0RUFBNEU7SUFDNUUsMEVBQTBFO0lBQzFFLDJFQUEyRTtJQUMzRSxpQkFBaUI7SUFDakIsSUFBSSxHQUFHLENBQUMsV0FBVztRQUFFLE9BQU87SUFFNUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxVQUFHLFVBQVUsbUJBQVMsS0FBSyxDQUFFLENBQUMsQ0FB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