"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.metricsAPICall = exports.setBackoff = void 0;
var node_fetch_1 = __importDefault(require("node-fetch"));
var timeout_signal_1 = __importDefault(require("timeout-signal"));
var package_json_1 = __importDefault(require("../../package.json"));
var config_1 = __importDefault(require("../config"));
var BACKOFF_SECONDS = 15; // when we need to backoff HTTP requests, pause for seconds
var backoffExpiresAt;
// Exported for use in unit tests
function setBackoff(expiresAt) {
    backoffExpiresAt = expiresAt;
}
exports.setBackoff = setBackoff;
function shouldBackoff(response) {
    // Some HTTP error codes indicate a problem with the API key, like the key is
    // invalid or it's being rate limited. To avoid pointless requests to the
    // ReadMe server, pause outgoing requests for a few seconds before trying
    // again. Logs will be silently discarded while requests are paused, which is
    // acceptable since the server wouldn't accept them anyway.
    switch (response.status) {
        case 401: // Unauthorized, i.e. this API key is invalid
            return true;
        case 403: // Forbidden, i.e. this API key is blocked by the server
            return true;
        case 429: // Too Many Requests, i.e. this API key is currently being rate limited
            return true;
        case 500: // Internal Server Error; give the ReadMe server a chance to recover
            return true;
        case 503: // Service Unavailable; same thing
            return true;
        default:
            return false;
    }
}
function getLogIds(body) {
    if (Array.isArray(body)) {
        return body.map(function (value) { return value._id; });
    }
    return body._id;
}
function metricsAPICall(readmeAPIKey, body, fireAndForget) {
    if (fireAndForget === void 0) { fireAndForget = false; }
    var signal = (0, timeout_signal_1["default"])(config_1["default"].timeout);
    var encodedKey = Buffer.from("".concat(readmeAPIKey, ":")).toString('base64');
    var makeRequest = function () {
        if (backoffExpiresAt) {
            if (backoffExpiresAt > new Date()) {
                return Promise.resolve();
            }
            // after the backoff expires, erase the old expiration time
            backoffExpiresAt = undefined;
        }
        return (0, node_fetch_1["default"])(new URL('/v1/request', config_1["default"].host), {
            method: 'post',
            body: JSON.stringify(body),
            headers: {
                Authorization: "Basic ".concat(encodedKey),
                'Content-Type': 'application/json',
                'User-Agent': "".concat(package_json_1["default"].name, "/").concat(package_json_1["default"].version)
            },
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            signal: signal
        })
            .then(function (response) {
            if (shouldBackoff(response)) {
                // backoff for a few seconds, but not if another callback has already started backing off
                if (!backoffExpiresAt) {
                    backoffExpiresAt = new Date();
                    backoffExpiresAt.setSeconds(backoffExpiresAt.getSeconds() + BACKOFF_SECONDS);
                }
            }
            return response;
        })["finally"](function () {
            timeout_signal_1["default"].clear(signal);
        });
    };
    if (fireAndForget) {
        makeRequest();
        return Promise.resolve({
            ids: getLogIds(body)
        });
    }
    return makeRequest().then(function (response) {
        return {
            response: response,
            ids: getLogIds(body)
        };
    });
}
exports.metricsAPICall = metricsAPICall;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljcy1sb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL21ldHJpY3MtbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDBEQUErQjtBQUMvQixrRUFBMkM7QUFFM0Msb0VBQXFDO0FBQ3JDLHFEQUErQjtBQXlDL0IsSUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLENBQUMsMkRBQTJEO0FBRXZGLElBQUksZ0JBQXNCLENBQUM7QUFFM0IsaUNBQWlDO0FBQ2pDLFNBQWdCLFVBQVUsQ0FBQyxTQUEyQjtJQUNwRCxnQkFBZ0IsR0FBRyxTQUFTLENBQUM7QUFDL0IsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBUyxhQUFhLENBQUMsUUFBa0I7SUFDdkMsNkVBQTZFO0lBQzdFLHlFQUF5RTtJQUN6RSx5RUFBeUU7SUFDekUsNkVBQTZFO0lBQzdFLDJEQUEyRDtJQUMzRCxRQUFRLFFBQVEsQ0FBQyxNQUFNLEVBQUU7UUFDdkIsS0FBSyxHQUFHLEVBQUUsNkNBQTZDO1lBQ3JELE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxHQUFHLEVBQUUsd0RBQXdEO1lBQ2hFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxHQUFHLEVBQUUsdUVBQXVFO1lBQy9FLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxHQUFHLEVBQUUsb0VBQW9FO1lBQzVFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsS0FBSyxHQUFHLEVBQUUsa0NBQWtDO1lBQzFDLE9BQU8sSUFBSSxDQUFDO1FBQ2Q7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUM7QUFFRCxTQUFTLFNBQVMsQ0FBQyxJQUF5QztJQUMxRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLEdBQUcsRUFBVCxDQUFTLENBQUMsQ0FBQztLQUNyQztJQUVELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUNsQixDQUFDO0FBRUQsU0FBZ0IsY0FBYyxDQUM1QixZQUFvQixFQUNwQixJQUF1QixFQUN2QixhQUFxQjtJQUFyQiw4QkFBQSxFQUFBLHFCQUFxQjtJQUVyQixJQUFNLE1BQU0sR0FBRyxJQUFBLDJCQUFhLEVBQUMsbUJBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxJQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQUcsWUFBWSxNQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFdEUsSUFBTSxXQUFXLEdBQUc7UUFDbEIsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixJQUFJLGdCQUFnQixHQUFHLElBQUksSUFBSSxFQUFFLEVBQUU7Z0JBQ2pDLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQzFCO1lBQ0QsMkRBQTJEO1lBQzNELGdCQUFnQixHQUFHLFNBQVMsQ0FBQztTQUM5QjtRQUNELE9BQU8sSUFBQSx1QkFBSyxFQUFDLElBQUksR0FBRyxDQUFDLGFBQWEsRUFBRSxtQkFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hELE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzFCLE9BQU8sRUFBRTtnQkFDUCxhQUFhLEVBQUUsZ0JBQVMsVUFBVSxDQUFFO2dCQUNwQyxjQUFjLEVBQUUsa0JBQWtCO2dCQUNsQyxZQUFZLEVBQUUsVUFBRyx5QkFBRyxDQUFDLElBQUksY0FBSSx5QkFBRyxDQUFDLE9BQU8sQ0FBRTthQUMzQztZQUNELDZEQUE2RDtZQUM3RCxhQUFhO1lBQ2IsTUFBTSxRQUFBO1NBQ1AsQ0FBQzthQUNDLElBQUksQ0FBQyxVQUFBLFFBQVE7WUFDWixJQUFJLGFBQWEsQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDM0IseUZBQXlGO2dCQUN6RixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQ3JCLGdCQUFnQixHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7b0JBQzlCLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQztpQkFDOUU7YUFDRjtZQUNELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUNELFNBQU8sQ0FBQSxDQUFDO1lBQ1AsMkJBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUM7SUFFRixJQUFJLGFBQWEsRUFBRTtRQUNqQixXQUFXLEVBQUUsQ0FBQztRQUNkLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUNyQixHQUFHLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztTQUNyQixDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sV0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUEsUUFBUTtRQUNoQyxPQUFPO1lBQ0wsUUFBUSxVQUFBO1lBQ1IsR0FBRyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDckIsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXhERCx3Q0F3REMifQ==