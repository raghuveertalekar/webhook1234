"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.patchRequest = void 0;
var string_decoder_1 = require("string_decoder");
var is_request_1 = __importDefault(require("./is-request"));
/**
 * For `text/*` requests Express doesn't give us a native way to retrieve data out of the payload
 * without using the `body-parser` middleware so we need to workaround it and access that obtain
 * that data ourselves.
 *
 * For `application/vnd.api+json` types of requests, Express doesn't recognize them as being JSON,
 * resulting in `req.body` being empty. Frustratingly enough `req.is('json')` also doesn't work so
 * we need to do our own check to look if it's got `+json` and then surface that potential JSON
 * payload accordingly.
 *
 * And if you can believe it or not, Express also doesn't process `x-www-form-urlencoded` payloads
 * into `req.body` for us without the `body-parser` middleware.
 *
 * @see {@link https://stackoverflow.com/a/12497793}
 * @see {@link https://stackoverflow.com/a/58568473}
 * @param {IncomingMessage} req
 */
function patchRequest(req) {
    // If we already have a body then whatever framework we're being run inside of is able to
    // handle these requests and we can rely on `req.body` instead hacky workarounds.
    if (req.body !== undefined) {
        return;
    }
    if ((0, is_request_1["default"])(req, 'text/*')) {
        req._text = '';
        req.setEncoding('utf8');
        req.on('data', function (chunk) {
            if (chunk)
                req._text += chunk;
        });
    }
    else if ((0, is_request_1["default"])(req, '+json')) {
        req._json = '';
        req.setEncoding('utf8');
        req.on('data', function (chunk) {
            if (chunk)
                req._json += chunk;
        });
    }
    else if ((0, is_request_1["default"])(req, 'application/x-www-form-urlencoded')) {
        var decoder_1 = new string_decoder_1.StringDecoder('utf-8');
        req._form_encoded = '';
        req.on('data', function (chunk) {
            req._form_encoded += decoder_1.write(chunk);
        });
        req.on('end', function () {
            req._form_encoded += decoder_1.end();
        });
    }
}
exports.patchRequest = patchRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2gtcmVxdWVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcGF0Y2gtcmVxdWVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxpREFBK0M7QUFFL0MsNERBQXFDO0FBRXJDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLEdBQTRCO0lBQ3ZELHlGQUF5RjtJQUN6RixpRkFBaUY7SUFDakYsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUMxQixPQUFPO0tBQ1I7SUFFRCxJQUFJLElBQUEsdUJBQVMsRUFBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUU7UUFDNUIsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUEsS0FBSztZQUNsQixJQUFJLEtBQUs7Z0JBQUUsR0FBRyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7S0FDSjtTQUFNLElBQUksSUFBQSx1QkFBUyxFQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUNsQyxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBQSxLQUFLO1lBQ2xCLElBQUksS0FBSztnQkFBRSxHQUFHLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztLQUNKO1NBQU0sSUFBSSxJQUFBLHVCQUFTLEVBQUMsR0FBRyxFQUFFLG1DQUFtQyxDQUFDLEVBQUU7UUFDOUQsSUFBTSxTQUFPLEdBQUcsSUFBSSw4QkFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBRXZCLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLFVBQUEsS0FBSztZQUNsQixHQUFHLENBQUMsYUFBYSxJQUFJLFNBQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtZQUNaLEdBQUcsQ0FBQyxhQUFhLElBQUksU0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDO0FBL0JELG9DQStCQyJ9