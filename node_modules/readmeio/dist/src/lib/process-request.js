"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.fixHeader = void 0;
var qs = __importStar(require("querystring"));
var url_1 = __importStar(require("url"));
var contentType = __importStar(require("content-type"));
var get_1 = __importDefault(require("lodash/get"));
var merge_1 = __importDefault(require("lodash/merge"));
var pick_1 = __importDefault(require("lodash/pick"));
var set_1 = __importDefault(require("lodash/set"));
var construct_payload_1 = require("./construct-payload");
var object_to_array_1 = require("./object-to-array");
/**
 * Ensure we have a string or undefined response for any header.
 *
 * @param header
 * @returns
 */
function fixHeader(header) {
    if (header === undefined) {
        return undefined;
    }
    if (Array.isArray(header)) {
        return header.join(',');
    }
    return String(header);
}
exports.fixHeader = fixHeader;
/**
 * Redacts a value by replacing it with a string like [REDACTED 6]
 *
 * @param value the value to be redacted
 * @returns A redacted string potentially containing the length of the original value, if it was a string
 */
function redactValue(value) {
    var redactedVal = typeof value === 'string' ? " ".concat(value.length) : '';
    return "[REDACTED".concat(redactedVal, "]");
}
/**
 * Redacts all the properties in an object
 *
 * @param obj The data object that is operated upon
 * @param redactedPaths a list of paths that point values which should be redacted
 * @returns An object with the redacted values
 */
function redactProperties(obj, redactedPaths) {
    if (redactedPaths === void 0) { redactedPaths = []; }
    var nextObj = __assign({}, obj);
    return redactedPaths.reduce(function (acc, path) {
        var value = (0, get_1["default"])(acc, path);
        if (value !== undefined)
            (0, set_1["default"])(acc, path, redactValue(value));
        return acc;
    }, nextObj);
}
/**
 * @param obj The data object that is operated upon
 * @param cb A callback that is invoked for each value found, the return value being the next value that is set in the returned object
 * @returns An object with the replaced values
 */
function replaceEach(obj, cb) {
    return Object.keys(obj).reduce(function (acc, key) {
        var value = obj[key];
        if (typeof value === 'object' && value !== null) {
            acc[key] = replaceEach(value, cb);
        }
        else if (value !== undefined) {
            acc[key] = cb(value);
        }
        return acc;
    }, {});
}
/**
 * Redacts everything but the provided fields
 *
 * @param obj The data object with fields to redact
 * @param nonRedactedPaths A list of all object paths that shouldn't be redacted
 * @returns A merged objects that is entirely redacted except for the values of the nonRedactedPaths
 */
function redactOtherProperties(obj, nonRedactedPaths) {
    var allowedFields = (0, pick_1["default"])(obj, nonRedactedPaths);
    var redactedFields = obj ? replaceEach(obj, redactValue) : obj;
    return (0, merge_1["default"])(redactedFields, allowedFields);
}
function isApplicationJson(mimeType) {
    if (!mimeType) {
        return false;
    }
    return (['application/json', 'application/x-json', 'text/json', 'text/x-json'].includes(mimeType) ||
        mimeType.indexOf('+json') !== -1);
}
function parseRequestBody(body, mimeType) {
    if (mimeType === 'application/x-www-form-urlencoded') {
        return qs.parse(body);
    }
    if (isApplicationJson(mimeType)) {
        try {
            return JSON.parse(body);
        }
        catch (err) {
            // no-op
        }
    }
    return body;
}
/**
 * This transforms the IncommingMessage and additional provided information into the relevant HAR structure
 *
 * @param req The IncommingMessage from the node server.
 * @param requestBody A parsed request body object, or an unparsed request body string.
 * @param options A collection of processing options.
 *
 * @returns The proper request structure following the HAR format
 */
function processRequest(req, requestBody, options) {
    var _a;
    var protocol = ((_a = fixHeader(req.headers['x-forwarded-proto'])) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || (0, construct_payload_1.getProto)(req);
    var host = fixHeader(req.headers['x-forwarded-host']) || req.headers.host;
    var denylist = (options === null || options === void 0 ? void 0 : options.denylist) || (options === null || options === void 0 ? void 0 : options.blacklist);
    var allowlist = (options === null || options === void 0 ? void 0 : options.allowlist) || (options === null || options === void 0 ? void 0 : options.whitelist);
    var mimeType = null;
    try {
        mimeType = contentType.parse(req.headers['content-type']).type;
    }
    catch (e) { } // eslint-disable-line no-empty
    var reqBody = typeof requestBody === 'string' ? parseRequestBody(requestBody, mimeType) : requestBody;
    var postData = null;
    if (denylist) {
        reqBody = typeof reqBody === 'object' ? redactProperties(reqBody, denylist) : reqBody;
        req.headers = redactProperties(req.headers, denylist);
    }
    if (allowlist && !denylist) {
        reqBody = typeof reqBody === 'object' ? redactOtherProperties(reqBody, allowlist) : reqBody;
        req.headers = redactOtherProperties(req.headers, allowlist);
    }
    if (mimeType === 'application/x-www-form-urlencoded') {
        postData = {
            mimeType: mimeType,
            // `reqBody` is likely to be an object, but can be empty if no HTTP body sent
            params: (0, object_to_array_1.objectToArray)((reqBody || {}))
        };
    }
    else if (isApplicationJson(mimeType)) {
        postData = {
            mimeType: mimeType,
            text: typeof reqBody === 'object' || Array.isArray(reqBody) ? JSON.stringify(reqBody) : reqBody
        };
    }
    else if (mimeType) {
        var stringBody = '';
        try {
            stringBody = typeof reqBody === 'string' ? reqBody : JSON.stringify(reqBody);
        }
        catch (e) {
            stringBody = '[ReadMe is unable to handle circular JSON. Please contact support if you have any questions.]';
        }
        postData = {
            mimeType: mimeType,
            // Do our best to record *some sort of body* even if it's not 100% accurate.
            text: stringBody
        };
    }
    // We use a fake host here because we rely on the host header which could be redacted.
    // We only ever use this reqUrl with the fake hostname for the pathname and querystring.
    // req.originalUrl is express specific, req.url is node.js
    var reqUrl = new url_1.URL(req.originalUrl || req.url, 'https://readme.io');
    if (req.headers.authorization) {
        req.headers.authorization = (0, construct_payload_1.mask)(req.headers.authorization);
    }
    var requestData = {
        method: req.method,
        url: url_1["default"].format({
            // Handle cases where some reverse proxies put two protocols into x-forwarded-proto
            // This line does the following: "https,http" -> "https"
            // https://github.com/readmeio/metrics-sdks/issues/378
            protocol: protocol.split(',')[0],
            host: host,
            pathname: reqUrl.pathname,
            // Search includes the leading questionmark, format assumes there isn't one, so we trim that off.
            query: qs.parse(reqUrl.search.substring(1))
        }),
        httpVersion: "".concat((0, construct_payload_1.getProto)(req).toUpperCase(), "/").concat(req.httpVersion),
        headers: (0, object_to_array_1.objectToArray)(req.headers),
        queryString: (0, object_to_array_1.searchToArray)(reqUrl.searchParams),
        postData: postData,
        // TODO: When readme starts accepting these, send the correct values
        cookies: [],
        headersSize: -1,
        bodySize: -1
    };
    if (requestData.postData === null) {
        delete requestData.postData;
    }
    return requestData;
}
exports["default"] = processRequest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1yZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9wcm9jZXNzLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLDhDQUFrQztBQUNsQyx5Q0FBK0I7QUFFL0Isd0RBQTRDO0FBQzVDLG1EQUE2QjtBQUM3Qix1REFBaUM7QUFDakMscURBQStCO0FBQy9CLG1EQUE2QjtBQUU3Qix5REFBcUQ7QUFDckQscURBQWlFO0FBRWpFOzs7OztHQUtHO0FBQ0gsU0FBZ0IsU0FBUyxDQUFDLE1BQWtDO0lBQzFELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtRQUN4QixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6QixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekI7SUFFRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QixDQUFDO0FBVkQsOEJBVUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQVMsV0FBVyxDQUFDLEtBQWE7SUFDaEMsSUFBTSxXQUFXLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFJLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3hFLE9BQU8sbUJBQVksV0FBVyxNQUFHLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQVMsZ0JBQWdCLENBQW9DLEdBQU0sRUFBRSxhQUFrQjtJQUFsQiw4QkFBQSxFQUFBLGtCQUFrQjtJQUNyRixJQUFNLE9BQU8sZ0JBQVEsR0FBRyxDQUFFLENBQUM7SUFDM0IsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUk7UUFDcEMs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