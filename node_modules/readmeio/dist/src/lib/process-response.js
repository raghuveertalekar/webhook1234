"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var http_1 = require("http");
var omit_1 = __importDefault(require("lodash/omit"));
var pick_1 = __importDefault(require("lodash/pick"));
var object_to_array_1 = require("./object-to-array");
var process_request_1 = require("./process-request");
/**
 * Transforms the provided ServerResponse and additional information into the appropriate HAR structure
 *
 * @param res The node ServerResponse object
 * @param responseBody A string representation of the response body
 * @param options A collection of additional options. See the documentation for more details.
 *
 * @returns The HAR formatted response details
 */
function processResponse(res, responseBody, options) {
    var denylist = (options === null || options === void 0 ? void 0 : options.denylist) || (options === null || options === void 0 ? void 0 : options.blacklist);
    var allowlist = (options === null || options === void 0 ? void 0 : options.allowlist) || (options === null || options === void 0 ? void 0 : options.whitelist);
    var body;
    try {
        body = JSON.parse(responseBody);
        // Only apply blacklist/whitelist if it's an object
        if (denylist) {
            body = (0, omit_1["default"])(body, denylist);
        }
        if (allowlist && !denylist) {
            body = (0, pick_1["default"])(body, allowlist);
        }
    }
    catch (e) {
        // Non JSON body
        body = responseBody;
    }
    var headers = res.getHeaders();
    if (denylist) {
        headers = (0, omit_1["default"])(headers, denylist);
    }
    if (allowlist && !denylist) {
        headers = (0, pick_1["default"])(headers, allowlist);
    }
    return {
        status: res.statusCode,
        // In fastify, at the point where we have to fetch the statusMessage
        // from the response, it is not set because the headers haven't been
        // flushed yet, so we need to fetch the default value from Node.
        // https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_response_statusmessage
        //
        // This is the same thing that Node.js does internally:
        // https://github.com/nodejs/node/blob/9b8ba2536044ae08a1cd747a3aa52df7d1815e7e/lib/_http_server.js#L318
        statusText: res.statusMessage || http_1.STATUS_CODES[res.statusCode],
        headers: (0, object_to_array_1.objectToArray)(headers, { castToString: true }),
        content: {
            text: JSON.stringify(body),
            size: Number((0, process_request_1.fixHeader)(res.getHeader('content-length') || 0)),
            mimeType: (0, process_request_1.fixHeader)(res.getHeader('content-type')) || 'text/plain'
        },
        // TODO: Once readme starts accepting these, send the correct values
        httpVersion: '',
        cookies: [],
        redirectURL: '',
        headersSize: 0,
        bodySize: 0
    };
}
exports["default"] = processResponse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1yZXNwb25zZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcHJvY2Vzcy1yZXNwb25zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLDZCQUFvQztBQUVwQyxxREFBMkM7QUFDM0MscURBQWdEO0FBRWhELHFEQUFrRDtBQUNsRCxxREFBOEM7QUFFOUM7Ozs7Ozs7O0dBUUc7QUFDSCxTQUF3QixlQUFlLENBQ3JDLEdBQW1CLEVBQ25CLFlBQXFCLEVBQ3JCLE9BQW9CO0lBRXBCLElBQU0sUUFBUSxHQUFHLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFFBQVEsTUFBSSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsU0FBUyxDQUFBLENBQUM7SUFDekQsSUFBTSxTQUFTLEdBQUcsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsU0FBUyxNQUFJLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLENBQUEsQ0FBQztJQUMzRCxJQUFJLElBQUksQ0FBQztJQUNULElBQUk7UUFDRixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoQyxtREFBbUQ7UUFDbkQsSUFBSSxRQUFRLEVBQUU7WUFDWixJQUFJLEdBQUcsSUFBQSxpQkFBZ0IsRUFBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekM7UUFFRCxJQUFJLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUMxQixJQUFJLEdBQUcsSUFBQSxpQkFBcUIsRUFBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDL0M7S0FDRjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsZ0JBQWdCO1FBQ2hCLElBQUksR0FBRyxZQUFZLENBQUM7S0FDckI7SUFFRCxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUM7SUFFL0IsSUFBSSxRQUFRLEVBQUU7UUFDWixPQUFPLEdBQUcsSUFBQSxpQkFBZ0IsRUFBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDL0M7SUFFRCxJQUFJLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUMxQixPQUFPLEdBQUcsSUFBQSxpQkFBcUIsRUFBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDckQ7SUFFRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLEdBQUcsQ0FBQyxVQUFVO1FBQ3RCLG9FQUFvRTtRQUNwRSxvRUFBb0U7UUFDcEUsZ0VBQWdFO1FBQ2hFLHNGQUFzRjtRQUN0RixFQUFFO1FBQ0YsdURBQXVEO1FBQ3ZELHdHQUF3RztRQUN4RyxVQUFVLEVBQUUsR0FBRyxDQUFDLGFBQWEsSUFBSSxtQkFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDN0QsT0FBTyxFQUFFLElBQUEsK0JBQWEsRUFBQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDdkQsT0FBTyxFQUFFO1lBQ1AsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzFCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBQSwyQkFBUyxFQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3RCxRQUFRLEVBQUUsSUFBQSwyQkFBUyxFQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxZQUFZO1NBQ25FO1FBQ0Qsb0VBQW9FO1FBQ3BFLFdBQVcsRUFBRSxFQUFFO1FBQ2YsT0FBTyxFQUFFLEVBQUU7UUFDWCxXQUFXLEVBQUUsRUFBRTtRQUNmLFdBQVcsRUFBRSxDQUFDO1FBQ2QsUUFBUSxFQUFFLENBQUM7S0FDWixDQUFDO0FBQ0osQ0FBQztBQXpERCxxQ0F5REMifQ==